package uz.gita.jaxongir.sellermanageruser.ui.componentsimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ShoppingCartimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.unit.dpimport uz.gita.jaxongir.sellermanageruser.data.models.ProductData@Composablefun ProductsComponent(    productCommon: ProductData,    onClickSell: () -> Unit,    onSellingPriceChange: (String) -> Unit,    sellingPrice: String) {    Card(        modifier = Modifier            .fillMaxWidth()            .padding(8.dp)            .border(width = 1.dp, color = Color.LightGray, shape = RoundedCornerShape(8.dp)),        shape = RoundedCornerShape(8.dp),        elevation = CardDefaults.cardElevation(1.dp)    ) {        Column(            modifier = Modifier                .fillMaxWidth()                .padding(16.dp),            verticalArrangement = Arrangement.spacedBy(12.dp)        ) {            ProductDetailRow(label = "Product Name:", value = productCommon.name)            ProductDetailRow(label = "Product Count:", value = productCommon.count.toString())            ProductDetailRow(                label = "Initial Price:",                value = "$${productCommon.initialPrice.format(2)}"            )            Row(modifier = Modifier.fillMaxWidth()) {                Spacer(modifier = Modifier.weight(1f))                Icon(                    imageVector = Icons.Default.ShoppingCart,                    contentDescription = "Sell",                    modifier = Modifier.clickable { onClickSell() }                )            }            var localSellingPrice by remember { mutableStateOf(sellingPrice) }            TextField(                value = localSellingPrice,                onValueChange = {                    localSellingPrice = it                    onSellingPriceChange(it)                },                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.NumberPassword),                label = { Text("Selling Price") },                singleLine = true            )        }    }}@Composablefun ProductDetailRow(label: String, value: String) {    Row(        verticalAlignment = Alignment.CenterVertically    ) {        Text(            text = label,            style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),            modifier = Modifier.width(150.dp)        )        Text(            text = value,            style = MaterialTheme.typography.bodyLarge,            modifier = Modifier.weight(1f)        )    }}fun Double.format(digits: Int): String = "%.${digits}f".format(this)